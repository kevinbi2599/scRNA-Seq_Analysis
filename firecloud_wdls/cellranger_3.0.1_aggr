task aggr {
    String run_name
    File aggr_csv
    String normalization

    command <<<
        # log resource usage for debugging purposes
        function runtimeInfo() {
            echo [$(date)]
            echo \* CPU usage: $(top -bn 2 -d 0.01 | grep '^%Cpu' | tail -n 1)%
            echo \* Memory usage: $(free -m | grep Mem | awk '{ OFMT="%.0f"; print ($3/$2)*100; }')%
            echo \* Disk usage: $(df | grep cromwell_root | awk '{ print $5 }')
        }
        while true;
            do runtimeInfo >> resource_usage.log;
            sleep 90;
        done &

        ##### MAIN COMMANDS BELOW #####

        set -x
        # set bash parameters to fail fast
        set -eu -o pipefail

        # need to generate reference directory
        cellranger aggr \
            --id=${run_name} \
            --csv=${aggr_csv} \
            --normalize=${normalization}

        # list files
        echo [$(date)] 'Listing files...'
        find .

        # pack up secondary analyses output
        tar -zvcf analysis.tar.gz ${sample}/outs/analysis
    >>>

    output {
        File summary_html = sample + "/outs/web_summary.html"
        File summary_json = sample + "/outs/summary.json"
        Array[File] filtered_gene_bc_mex = glob(sample + "/outs/filtered_feature_bc_matrix/*")
        File filtered_gene_bc_h5 = sample + "/outs/filtered_feature_bc_matrix.h5"
        Array[File] unfiltered_gene_bc_mex = glob(sample + "/outs/raw_feature_bc_matrix/*")
        File unfiltered_gene_bc_h5 = sample + "/outs/raw_feature_bc_matrix.h5"
        File analysis = "analysis.tar.gz"
        File molecule_info = sample + "/outs/molecule_info.h5"
        File loupe = sample + "/outs/cloupe.cloupe"
        File input_csv = sample + "/outs/aggregation.csv"
        File cell_containing_partitions= sample + "/outs/cell_barcodes.csv"
        File resource_usage = "resource_usage.log"
        File pipestance_info = sample + "/" + sample + ".mri.tgz"
    }

    runtime {
        disks: "local-disk 350 LOCAL"
        cpu: 32
        memory:120 GB"
        docker: "gcr.io/vanallen-gcp-dfci/scrna/cellranger:3.0.1"
        preemptible: 2
    }
}

workflow cellranger_aggr {
    String run_name
    File aggr_csv
    String normalization

    call aggr {
        input:
            run_name=run_name,
            aggr_csv=aggr_csv,
           normalization=normalization
    }
}
